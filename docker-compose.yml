version: "3"

services:

  traefik:
    image: "traefik:v2.0.5"
    container_name: "traefik"
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --providers.docker
      - --certificatesresolvers.leresolver.acme.tlschallenge=true
      - --certificatesresolvers.leresolver.acme.email=${MY_EMAIL}
      - --certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json
    labels:
      # global redirect to https
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      # middleware redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  heightmap:
    image: height_map_docker
    volumes:
      - $PWD/../HeightMap/height_map/maps:/app/height_map/maps
    labels:
      - "traefik.http.routers.heightmap.rule=Host(`heightmap.${MY_DOMAIN}`)"
      - "traefik.http.routers.heightmap.entrypoints=websecure"
      - "traefik.http.routers.heightmap.tls=true"
      - "traefik.http.routers.heightmap.tls.certresolver=leresolver"
      - "traefik.http.middlewares.strip-heightmap.stripprefix.prefixes=/heightmap"
      - "traefik.http.routers.heightmap-router.rule=(Host(`${MY_DOMAIN}`) && PathPrefix(`/heightmap`))"
      - "traefik.http.routers.heightmap-router.middlewares=strip-heightmap@docker"
      - "traefik.http.routers.heightmap-router.entrypoints=websecure"
      - "traefik.http.routers.heightmap-router.tls.certresolver=leresolver"

  surfacemap:
    image: surface_map_docker
    volumes:
      - $PWD/../SurfaceMap/surface_map/maps:/app/surface_map/maps
    labels:
      - "traefik.http.routers.surfacemap.rule=Host(`surfacemap.${MY_DOMAIN}`)"
      - "traefik.http.routers.surfacemap.entrypoints=websecure"
      - "traefik.http.routers.surfacemap.tls=true"
      - "traefik.http.routers.surfacemap.tls.certresolver=leresolver"
      - "traefik.http.middlewares.strip-surfacemap.stripprefix.prefixes=/surfacemap"
      - "traefik.http.routers.surfacemap-router.rule=(Host(`${MY_DOMAIN}`) && PathPrefix(`/surfacemap`))"
      - "traefik.http.routers.surfacemap-router.middlewares=strip-surfacemap@docker"
      - "traefik.http.routers.surfacemap-router.entrypoints=websecure"
      - "traefik.http.routers.surfacemap-router.tls.certresolver=leresolver"

  flightmap:
    image: flightmap_europe_simple
    volumes:
      - $PWD/../FlightMapEuropeSimple/flightroutes:/app/flightroutes
    labels:
      - "traefik.http.routers.flightmap.rule=Host(`flightmap.${MY_DOMAIN}`)"
      - "traefik.http.routers.flightmap.entrypoints=websecure"
      - "traefik.http.routers.flightmap.tls=true"
      - "traefik.http.routers.flightmap.tls.certresolver=leresolver"
      - "traefik.http.middlewares.strip-flightmap.stripprefix.prefixes=/flightmap"
      - "traefik.http.routers.flightmap-router.rule=(Host(`${MY_DOMAIN}`) && PathPrefix(`/flightmap`))"
      - "traefik.http.routers.flightmap-router.middlewares=strip-flightmap@docker"
      - "traefik.http.routers.flightmap-router.entrypoints=websecure"
      - "traefik.http.routers.flightmap-router.tls.certresolver=leresolver"

  whoami:
      image: "containous/whoami"
      container_name: "whoami"
      labels:
        - "traefik.http.routers.whoami.rule=Host(`whoami.${MY_DOMAIN}`)"
        - "traefik.http.routers.whoami.entrypoints=websecure"
        - "traefik.http.routers.whoami.tls=true"
        - "traefik.http.routers.whoami.tls.certresolver=leresolver"
        - "traefik.http.middlewares.strip-whoami.stripprefix.prefixes=/whoami"
        - "traefik.http.routers.whoami-router.rule=(Host(`${MY_DOMAIN}`) && PathPrefix(`/whoami`))"
        - "traefik.http.routers.whoami-router.middlewares=strip-whoami@docker"
        - "traefik.http.routers.whoami-router.entrypoints=websecure"
        - "traefik.http.routers.whoami-router.tls.certresolver=leresolver"
